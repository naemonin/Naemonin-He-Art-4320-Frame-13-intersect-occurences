import bpy
import math

# Delete all existing objects
bpy.ops.object.select_all(action='DESELECT')
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete()

# Create a torus (ring)
bpy.ops.mesh.primitive_torus_add(
    major_radius=1,  # Half of the x dimension (2.05m / 2)
    minor_radius=0.04,  # Half of the z dimension (0.0565m / 2)
    location=(0, 0, 0)
)

# Get the current object (Torus)
ring = bpy.context.object

# Set initial transformation (frame 0)
ring.location = (0, 0, 0)
ring.rotation_euler = (0, 0, 0)
ring.scale = (0, 0, 0)

# Insert keyframe for initial state
ring.keyframe_insert(data_path="location", frame=0)
ring.keyframe_insert(data_path="rotation_euler", frame=0)
ring.keyframe_insert(data_path="scale", frame=1)

# Set final transformation (frame 4320)
ring.location = (0, 0, 0)
ring.rotation_euler = (
    math.radians(360),  # Rotation around X axis
    math.radians(720),  # Rotation around Y axis
    math.radians(1080)  # Rotation around Z axis
)
ring.scale = (1, 1, 1)

# Insert keyframe for final state
ring.keyframe_insert(data_path="location", frame=4320)
ring.keyframe_insert(data_path="rotation_euler", frame=4320)
ring.keyframe_insert(data_path="scale", frame=4320)

# Set up the timeline for the torus
bpy.context.scene.frame_start = 0
bpy.context.scene.frame_end = 4320

print("Torus animation created from frame 0 to 4320!")

# Create a cylinder
bpy.ops.mesh.primitive_cylinder_add(
    radius=0.04,  # Radius for the x and y dimensions
    depth=2,  # Depth for the z dimension
    location=(0, 0, 0)
)

# Get the current object (cylinder)
cylinder = bpy.context.object

# Set initial transformation (frame 0)
cylinder.scale = (0, 0, 0)
cylinder.rotation_euler = (0, 0, 0)

# Insert keyframes for initial state
cylinder.keyframe_insert(data_path="scale", frame=0)
cylinder.keyframe_insert(data_path="rotation_euler", frame=0)

# Set final transformation (frame 4320)
cylinder.scale = (1, 1, 1)
cylinder.rotation_euler = (
    math.radians(540),  # Rotation around X axis
    math.radians(2160),  # Rotation around Y axis
    math.radians(3240)  # Rotation around Z axis
)

# Insert keyframes for final state
cylinder.keyframe_insert(data_path="scale", frame=4320)
cylinder.keyframe_insert(data_path="rotation_euler", frame=4320)

# Set up the timeline for the cylinder
bpy.context.scene.frame_start = 0
bpy.context.scene.frame_end = 4320

print("Cylinder animation created from frame 0 to 4320!")
00  °!0!°
01  °!01!°
11  °!44 512!°
12  °!44 535!°  
21  °!87 1035!°
22  °!87 1046!° 
31  °!109 1308!° 
32  °!110 1320!° 
41  °!123 1468!° 
42  °!123 1477!° 
51  °!137 1640!° 
52  °!137 1653!° 
61  °!146 1640!° 
62  °!146 1653!° 
71  °!159 10908!°
711 °!160 1919!° 
712 °!161 1936!° 
72  °!162 1947!°
81  °!178 2136!° 
811 °!179 2144!° 
812 °!180 2160!° 
813 °!181 2168!° 
814 °!182 2176!° 
815 °!183 2192!°
82  °!184 2208!° 
91  °!200 2393!°
911 °!200 2401!°
92  °!200 2403!° 
101 °!208 2497!°
102 °!209 2506°!
1011°!210 2507!°
111 °!258 3085!°
112 °!258 3098!°
121 °!291 3485!°
1211°!291 3487!°
122 °!291 3498!°
1301 °314 3772°
131 °!315 3773
132 °!315 3791!°
1302 °316 3792°
13001°316 3705°
"""
This script animates a torus and a cylinder in Blender from frame 0 to frame 4320.
During the animation, the torus and cylinder intersect at specific frames. These
intersection points are classified into 14 categories:

- Category `0`: Represents an empty state or no intersection.
- Categories `1` to `13`: Represent distinct points where the torus and cylinder intersect.

Each category contains frame numbers where these intersections occur, represented by the format:
    °!frame!°

The intersection points are sorted chronologically by growing frame numbers.

Below is the list of intersection points categorized by their respective group (0-13):
"""

# Example of intersection points classified by category:

intersections = {
    0: ["°!0!°"],
    1: ["°!01!°"],
    11: ["°!44 512!°", "°!44 535!°"],
    21: ["°!87 1035!°", "°!87 1046!°"],
    31: ["°!109 1308!°", "°!110 1320!°"],
    41: ["°!123 1468!°", "°!123 1477!°"],
    51: ["°!137 1640!°", "°!137 1653!°"],
    61: ["°!146 1640!°", "°!146 1653!°"],
    71: ["°!159 10908!°", "°!160 1919!°", "°!161 1936!°", "°!162 1947!°"],
    81: ["°!178 2136!°", "°!179 2144!°", "°!180 2160!°", "°!181 2168!°", "°!182 2176!°", "°!183 2192!°", "°!184 2208!°"],
    91: ["°!200 2393!°", "°!200 2401!°", "°!200 2403!°"],
    101: ["°!208 2497!°", "°!209 2506!°", "°!210 2507!°"],
    111: ["°!258 3085!°", "°!258 3098!°"],
    121: ["°!291 3485!°", "°!291 3487!°", "°!291 3498!°"],
    1301: ["°!314 3772!°", "°!315 3773!°", "°!315 3791!°", "°!316 3792!°", "°!316 3705!°"]
}

# The above dictionary organizes the frames where intersections occur, 
# with keys representing the category, and values being the corresponding 
# frame numbers formatted as '°!frame!°'.

# The animation timeline spans 0 to 4320 frames.
# You can modify the code to add markers, visual cues, or transformations 
# at these intersection frames in the Blender animation.
